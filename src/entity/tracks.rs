//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tracks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub library_id: i32,
    pub media_id: i32,
    pub manga_id: i32,
    pub score: Option<i32>,
    pub started_reading_date: Option<i32>,
    pub finished_reading_date: Option<i32>,
    pub last_chapter_read: Option<i32>,
    pub track_status_index: i32,
    pub sync_id: i32,
    pub title: String,
    pub total_chapter: Option<i32>,
    pub tracking_url: String,
    pub is_manga: Option<i8>,
    pub updated_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::manga::Entity",
        from = "Column::MangaId",
        to = "super::manga::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Manga,
    #[sea_orm(
        belongs_to = "super::track_status::Entity",
        from = "Column::TrackStatusIndex",
        to = "super::track_status::Column::Index",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TrackStatus,
}

impl Related<super::manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manga.def()
    }
}

impl Related<super::track_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrackStatus.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
