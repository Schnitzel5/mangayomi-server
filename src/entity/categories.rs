//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "categories")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub for_item_type: i32,
    pub pos: Option<i32>,
    pub hide: Option<i8>,
    pub user: i32,
    pub updated_at: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::User",
        to = "super::accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Accounts,
    #[sea_orm(has_many = "super::categ_manga::Entity")]
    CategManga,
    #[sea_orm(
        belongs_to = "super::item_types::Entity",
        from = "Column::ForItemType",
        to = "super::item_types::Column::Index",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ItemTypes,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::categ_manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategManga.def()
    }
}

impl Related<super::item_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemTypes.def()
    }
}

impl Related<super::manga::Entity> for Entity {
    fn to() -> RelationDef {
        super::categ_manga::Relation::Manga.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::categ_manga::Relation::Categories.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
