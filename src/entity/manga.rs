//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "manga")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub link: String,
    pub image_url: String,
    pub description: Option<String>,
    pub author: Option<String>,
    pub artist: Option<String>,
    pub status_index: i32,
    pub favorite: i8,
    pub source: String,
    pub lang: String,
    pub date_added: i32,
    pub last_update: Option<i32>,
    pub last_read: Option<i32>,
    pub is_local_archive: Option<i8>,
    #[sea_orm(column_type = "custom(\"BINARY(16384)\")", nullable)]
    pub custom_cover_image: Option<String>,
    pub custom_cover_from_tracker: Option<String>,
    pub item_type: i32,
    pub user: i32,
    pub genres: Option<String>,
    pub updated_at: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::User",
        to = "super::accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Accounts,
    #[sea_orm(has_many = "super::categ_manga::Entity")]
    CategManga,
    #[sea_orm(has_many = "super::chapters::Entity")]
    Chapters,
    #[sea_orm(
        belongs_to = "super::item_types::Entity",
        from = "Column::ItemType",
        to = "super::item_types::Column::Index",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ItemTypes,
    #[sea_orm(
        belongs_to = "super::status::Entity",
        from = "Column::StatusIndex",
        to = "super::status::Column::Index",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Status,
    #[sea_orm(has_many = "super::tracks::Entity")]
    Tracks,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::categ_manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategManga.def()
    }
}

impl Related<super::chapters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapters.def()
    }
}

impl Related<super::item_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemTypes.def()
    }
}

impl Related<super::status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Status.def()
    }
}

impl Related<super::tracks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tracks.def()
    }
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        super::categ_manga::Relation::Categories.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::categ_manga::Relation::Manga.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
