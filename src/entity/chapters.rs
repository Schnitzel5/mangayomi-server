//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "chapters")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub url: String,
    pub date_upload: String,
    pub scanlator: Option<String>,
    pub is_bookmarked: i8,
    pub is_read: i8,
    pub last_page_read: String,
    pub archive_path: Option<String>,
    pub manga: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::histories::Entity")]
    Histories,
    #[sea_orm(
        belongs_to = "super::manga::Entity",
        from = "Column::Manga",
        to = "super::manga::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Manga,
    #[sea_orm(has_many = "super::updates::Entity")]
    Updates,
}

impl Related<super::histories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Histories.def()
    }
}

impl Related<super::manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manga.def()
    }
}

impl Related<super::updates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Updates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
